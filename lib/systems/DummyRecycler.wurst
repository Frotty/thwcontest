package DummyRecycler
import MapBounds 
import GameTimer
// Credits to Bribe

/** Number of different angles recognized by the system 
	Higher value increases realism but decreases recycle frequency. */
constant int ANG_N = 8
/** Max dummies per indexed angle. I recommend lowering this if you increase ANG_N. */
constant int ANG_STORAGE_MAX = 12
/**	Allow the special effect on
	the unit to complete its "death" animation in this timeframe. Must
	be higher than 0.74 seconds to allow the unit time to turn. This
	number should not be lower than the maximum death-animation time of
	your missile-units' effect attachments, just to be safe. */
constant real DEATH_TIME = 0.75 

/** Generate angle value from ANG_N. */
constant int ANG_VAL = 360 div ANG_N
/** The middle value of angle value. */
constant int ANG_MID = ANG_VAL div 2

/** Recycled dummy units. */
unit array stack
/** How many units are in the stack? */
int array stackN
/** Prevents early recycling of units. */
real array timeStamp
int array queueNext
int array queueLast
int recycle = 0
/** Used to prevent double frees. */
group protect   = CreateGroup()

/** Look at newDummy with vec3 */
public function newDummy( vec2 pos, angle facing ) returns unit
	return newDummy(pos.toVec3(), facing)

/** Get a dummyunit out of the stack with the nearest angle
	If all dummies are currently in use a new dummy is created
	Dummies are paused by default. If you want them to cast spells
	or similar actions, unpause them first and pause them again later.
	(Dummies get auto-repaused after a SPELL_ENDCAST event.) */
public function newDummy( vec3 pos, angle facing ) returns unit
	int i = R2I(facing.degrees()).moduloInt(360) div ANG_VAL
	int qn = queueNext[i]
	unit u
	if qn != 0 and getElapsedGameTime() >= timeStamp[qn] 
		//Dequeue this
		queueNext[i] = queueNext[qn]
		if queueNext[i] == 0 
			queueLast[i] = i

		stackN[i]--
		//Recycle this index
		queueLast[qn] = recycle
		recycle = qn
		//Old unit will return as new
		u = stack[qn]
		u.setFacing(facing.degrees())
		GroupRemoveUnit(protect, u)
		u.pause()
	else
		u = createUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, pos, facing)
			..addAbility(HEIGHT_ENABLER)
			..removeAbility(HEIGHT_ENABLER)
			..addAbility(LOCUST_ID)
			..pause()

	u.setXYZ(pos)
	bj_lastCreatedUnit = u
	return bj_lastCreatedUnit

/** Immediately recycle a dummy */
public function recycleDummy( unit u )
	recycleDummy(u, 0)
	
/** Recycle a dummy after a delay */
public function recycleDummy( unit u, real delay )
	int rc = recycle
	if u.getTypeId() == DUMMY_UNIT_ID and not IsUnitInGroup(u, protect) 
		if rc == 0 
			u.remove()
			return
		//Recycle this
		recycle = queueLast[rc]
		//Index the dummy unit to an available facing angle.
		int i = R2I(GetUnitFacing(u)) div ANG_VAL
		if stackN[i] < ANG_STORAGE_MAX 
			i = ANG_N
			while stackN[i] > ANG_STORAGE_MAX
				i--

		//Enqueue this
		queueNext[queueLast[i]] = rc
		queueLast[i] = rc
		queueNext[rc] = 0
		stackN[i] = stackN[i] + 1
		//Allow a time barrier for the effect to destroy/turn to complete.
		timeStamp[rc] = getElapsedGameTime() + DEATH_TIME + delay
		stack[rc] = u
		//Prevent double-free of this unit.
		GroupAddUnit(protect, u)
		//Rethe dummy's properties.
		u.setFacing( (i * ANG_VAL + ANG_MID).toReal())
		SetUnitVertexColor(u, 255, 255, 255, 255)
		SetUnitAnimationByIndex(u, 90)
		SetUnitScale(u, 1, 1, 1)
		u.setOwner(DUMMY_PLAYER, true)
	else
		error("[DummyRecycler] Error: Attempt to recycle invalid unit.")


				
			
init
	int endPos
	int n = ANG_N
	real angl
	real x = mapMaxX
	real y = mapMaxY
	for int i = ANG_N downto 0
		stackN[i] = ANG_STORAGE_MAX
		queueNext[i] = n
		angl = (i * ANG_VAL + ANG_MID).toReal()
		endPos = n + ANG_STORAGE_MAX
		queueLast[i] = endPos - 1
		while n < endPos
			queueNext[n] = n + 1
			stack[n] = CreateUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, x, y, angl)
			stack[n]
				..addAbility(HEIGHT_ENABLER)
				..removeAbility(HEIGHT_ENABLER)
				..addAbility(LOCUST_ID)
				..pause()
			n++

		queueNext[n - 1] = 0


