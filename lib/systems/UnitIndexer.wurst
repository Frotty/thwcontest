package UnitIndexer
import MapBounds
import NoWurst
import Unit
import Trigger
import Player
import TempGroups
import PrintingHelper
import AbilityObjEditing
import initlater RegisterEvents

public function fromIndex(int index) returns unit
	return (index castTo UnitIndex).u

public function unit.getIndex() returns int
	return this.getUserData()
	
constant eventTrigger = CreateTrigger()

public function getIndexUnit() returns unit
	return UnitIndex.tempUnit
	
public function onIndex(code c)
	eventTrigger.addCondition(Condition(c))

public function onDeindex(code c)
	eventTrigger.addAction(c)

class UnitIndex
	unit u
	static unit tempUnit = null
	construct(unit u)
		u..setUserData(this castTo int)
		..addAbility(ABILITY_ID)..makeAbilityPermanent(ABILITY_ID, true)
		this.u = u
		tempUnit = u
		eventTrigger.evaluate()
		tempUnit = null
		
	ondestroy
		eventTrigger.execute()
		
init
	CreateTrigger()..registerEnterRegion(mapRegion, null)
	..addCondition(Condition(() -> new UnitIndex(GetTriggerUnit())))
	
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> begin
		let leavingUnit = GetFilterUnit()
		print("leaving: " + leavingUnit.getName())
		let uindex = leavingUnit.getIndex() castTo UnitIndex
		if leavingUnit.getAbilityLevel(ABILITY_ID) == 0 and uindex != null
			UnitIndex.tempUnit = leavingUnit
			destroy uindex
			UnitIndex.tempUnit = null
	end)
	for i = 0 to bj_MAX_PLAYER_SLOTS-1
		players[i].setAbilityAvailable(ABILITY_ID, false)
    
	GroupEnumUnitsInRect(ENUM_GROUP, mapRect, Filter(() -> new UnitIndex(GetFilterUnit())))
    

constant ABILITY_ID = '!e@$'

@compiletime function generateAbility()
	new AbilityDefinitionDefend(ABILITY_ID)
	..setName("Deindex Detect")..setEditorSuffix("(Unit Indexer)")
	..setArtCaster("")..setIconNormal("")..setRace("0")