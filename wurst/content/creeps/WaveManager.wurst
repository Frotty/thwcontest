package WaveManager
import WavePool
import Spawner
import ClosureTimers
import GameTimer

public class WaveManager
	static Queue<WavePool> waves
	static WavePool currentWave = null
	static timer waveTimer = CreateTimer()
	static real waveStartTime
	static function addAllWaves(Queue<WavePool> waves)
		print("WaveQueue Size " + waves.getSize().toString())
		WaveManager.waves = waves
		
	static function startNextWave()
		if currentWave != null
			destroy currentWave
		currentWave = waves.dequeue()
		waveStartTime = getElapsedGameTime()
		let wave_duration = currentWave.getDuration()
		doPeriodicallyTimed(0.25, wave_duration, (CallbackCounted cb) -> begin
			let gameTime = getElapsedGameTime()
			for sp in currentWave.spawns
				if waveStartTime + sp.time < gameTime and sp.amount > 0
					spawn(sp)
			if cb.isLast()
				startNextWave()
				print("next wave called: " + waves.peek().getDuration().toString())
		end)
		
		
	/*static function startNextWave()
		print("starting Wave")
		currentWave = waves.dequeue()
		if currentWave.spawns.getSize() > 0
			let spawn = currentWave.spawns.dequeue()
			waveTimer..setData(spawn castTo int)..start(spawn.time * 1., function WaveManager.spawn)
			
	static function continueWave()
		if currentWave.spawns.getSize() > 0
			let spawn = currentWave.spawns.dequeue()
			waveTimer..setData(spawn castTo int)..start(spawn.time * 1., function WaveManager.spawn)
		else
			//TODO shield
			startNextWave()
*/			
	static function spawn(SpawnContainer sc)
		switch sc.where
			case SpawnerGroup.ALL
				for s in spawners
					s.spawnCreep(sc.creepDef)
			case SpawnerGroup.NORTH
				NORTH.spawnCreep(sc.creepDef)
			case SpawnerGroup.EAST
				EAST.spawnCreep(sc.creepDef)
			case SpawnerGroup.WEST
				WEST.spawnCreep(sc.creepDef)
		sc.amount--
					
	
			
/*	static function spawn()
		let sc = waveTimer.getData() castTo SpawnContainer
		sc.amount--
		switch sc.where
			case SpawnerGroup.ALL
				for s in spawners
					s.spawnCreep(sc.creepDef)
			case SpawnerGroup.NORTH
				NORTH.spawnCreep(sc.creepDef)
			case SpawnerGroup.EAST
				EAST.spawnCreep(sc.creepDef)
			case SpawnerGroup.WEST
				WEST.spawnCreep(sc.creepDef)
		if sc.amount <= 0
			WaveManager.continueWave()
		else
			waveTimer.start(0.5, function WaveManager.spawn)
*/