package Crusader
import MapStuff
import Fx
import Creep
import Hero
import DummyCaster
import ChannelAbilityPreset
import AbilityObjEditing
import TempGroups
import ClosureEvents
import StunHandler
import ClosureForGroups
import ClosureTimers
import Lightning
import DamageMod
import Damager
import BonusHandler

int CRUSADER_ID

int BACKOFF_SPELL_ID
int SAFEGUARD_SPELL_ID
int PHALANX_SPELL_ID
int DUMBACKOFF_SPELL_ID

public class Crusader extends Hero
	timer sg_timer //sg stands for SafeGuard spell
	real sg_remaining // Counts back from 6 seconds
	real sg_damage // saves incoming damage for healback
	Hero sg_target
	real sg_damagewindow
	trigger summontrigger
	boolean ph_active = false
	vec2 ph_pos
	angle ph_facing
	unit ph_unit1
	unit ph_unit2
	boolean ph_1_set = false
	int ph_armor
	
	
	construct(vec3 pos, player owner )
		super(pos, owner, CRUSADER_ID)
		summontrigger = CreateTrigger()
		summontrigger.registerUnitEvent(actor,EVENT_UNIT_SUMMON)
		summontrigger.addAction(function addPhalanx)
		
	override function onCast(int spellId, int lvl)
		print("Crusader - onCast function called")
		switch spellId
			case PHALANX_SPELL_ID
				ph_pos = actor.getPos()
				ph_facing = actor.getFacingAngle()
				ph_1_set = false
				addUnitBonus(actor,Bonus.ARMOR, - ph_armor)
	
	override function onUnitCast(int spellId, unit target, int lvl)
		print("Crusader - onUnitCast function called")
		switch spellId
			case SAFEGUARD_SPELL_ID
				castSafeGuard(target) 
			case BACKOFF_SPELL_ID
				castBackOff() 
		
	override function onPointCast(int spellId, vec2 target, int lvl)
	
	function castBackOff() // Q ability of Crusader. Instant cast.
		//DummyCaster dc = new DummyCaster(DUMBACKOFF_SPELL_ID,"stomp",owner, false) //Create dummy for stun
		//dc.recycleDelay = .5
		//dc.castInPoint(pos.toVec2().polarOffset(actor.getFacingAngle(), 100))
		real abilityrange = 400 //could be dynamic later?
		// From ClosureForGroups
		// forUnitsInRange(pos.toVec2(), abilityrange, (unit u) -> begin
		//       ^										  ^			  ^
		//       |										  |			  |
		//   (Function from package)	(parameter of the lambda expr)(starts a block if the expressions is more than 1 line)
		// This is an anonymous function (as you might know it from c++)
		// In this case it creates a closure which means it can capture local variables by value
		// FOr example see safe Guard
		// For more information on the topic: https://peq.github.io/WurstScript/manual.html#lambda_expressions_and_closures
		let eff = AddSpecialEffectTarget("Abilities\\Spells\\Items\\SpellShieldAmulet\\MagicShieldBlue.mdx",actor,"chest")
		eff.destr()
		forUnitsInRange(pos.toVec2(), abilityrange, (unit u) -> begin
			print("loop")
			if u.getEntity() instanceof Creep and u.isAlive()
				print("is creep")
				let creep = u.getEntity() castTo Creep
				var angl = pos.angleTo2d(creep.pos)
				if angl.radians < 0
					angl = angle(PI2 + angl.radians)
				print("angl = " + angl.degrees().toString() + "°")
				print("actor = " + actor.getFacingAngle().degrees().toString() + "°")
				if (angl - actor.getFacingAngle()).degrees().abs() < 60
					print("is angle")
					creep.addVel(vec3(angl.cos() * 10, angl.sin() * 10, 10))
					creep.actor.applyStun(false, 2, creep.owner)
		end)

				//dc.castOnTarget(c.actor)
				//ENUM_GROUP.removeUnit(u) // Will this fuck the for cylce up?
		//dc.castOnGroup(ENUM_GROUP) //Using dummycaster's corresponding function.
		//destroy dc
		
	OnDamage onDamageClosure
		
	function castSafeGuard(unit target) // E ability of Crusader. Allied hero cast.
		// Should probably work on summouns (of there every happen any) too
		let targetEntity = target.getEntity()
		if target == actor //Different effect if casted on self.
			print("yuo cheating!")
		else
			print("created")
			// Create local vars to be captured by closure (ignore warning)
			let speed = 20.
			let zoffset = vec3(0,0,50)
			setTarget(targetEntity.pos.toVec2(),speed)
			var jump_duration = pos.distToVec2d(targetEntity.pos) / speed //Using the same formula as the setTarget() function here.
			if jump_duration < 1.
				jump_duration = 1./speed
			jump_duration *= ANIMATION_PERIOD
			doAfter(jump_duration, () -> begin //We only add the effects of the ability when the jump is done.
				let channel_duration = 5.
				let maxDistance = 500
				let lng = addLightning("SPLK", true, pos+zoffset, targetEntity.pos+zoffset)
				let eff = AddSpecialEffectTarget("Models\\MagicShieldBlue.mdx",targetEntity.actor,"origin")

				OnDamage ond = (unit damaged, unit source, real amount) -> begin
					let dmg = getDamage() * 0.75
					modifyDamage(getDamage() * 0.25)
					source.damageTarget(actor, dmg)
					var col = lng.getColor()
					col.green = 2
					col.blue = 2
					lng.setColor(col)
					AddSpecialEffectTarget("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",targetEntity.actor,"origin").destr()
					AddSpecialEffectTarget("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",actor,"origin").destr()
				end
				onDamage(target, ond)
				doPeriodicallyTimed(ANIMATION_PERIOD, 5, (CallbackCounted cb) -> begin
					var col = lng.getColor()
					col.alpha = ((maxDistance - (pos.distToVec(targetEntity.pos) / maxDistance)) * 255).toInt()
					if col.blue < 255
						col.blue *= col.blue
					if col.green < 255
						col.green *= col.green
					lng..move(true, pos+zoffset, targetEntity.pos+zoffset)
					..setColor(col)
					if cb.isLast()
						lng.destr()
						eff.destr()
						destroy ond
				end)
			end)
			
	function phalanx()
		if (pos - ph_pos).length() > 20
			ph_unit1.kill()
			ph_unit2.kill()
			ph_active = false
		GroupEnumUnitsInRange(ENUM_GROUP, pos.x, pos.y, 800, Condition(function ph_filter))
		ph_armor = CountUnitsInGroup(ENUM_GROUP)
		ENUM_GROUP.clear()
	
	static function ph_filter()returns boolean
		return GetFilterUnit().getEntity() instanceof Creep and GetFilterUnit().isAlive()
		
	static function addPhalanx()
		unit source = GetSummoningUnit()
		Crusader c = source.getEntity() castTo Crusader
		if not IsUnitIllusion(GetSummonedUnit())
			print("setting Caster")
			c.actor.setFacing(c.ph_facing)
			c.actor.setPos(c.ph_pos)
			c.actor.issueImmediateOrderById(851993) //Hold Position
			c.ph_active = true
			c.ph_armor = 0
			doPeriodically(1., (CallbackPeriodic cb)->begin
				GroupEnumUnitsInRange(ENUM_GROUP, c.pos.x, c.pos.y, 800, Condition(function ph_filter))
				int armor = CountUnitsInGroup(ENUM_GROUP)
				addUnitBonus(c.actor,Bonus.ARMOR, armor - c.ph_armor)
				c.ph_armor = armor
				ENUM_GROUP.clear()
				if (c.pos.toVec2() - c.ph_pos).length() > 50
					c.ph_unit1.kill()
					c.ph_unit2.kill()
					c.ph_active = false
					addUnitBonus(c.actor,Bonus.ARMOR, - c.ph_armor)
					c.ph_armor = 0
					destroy cb
			end)
		else
			angle f = c.ph_facing + angle(PI/2)
			print("setting Illusion")
			if c.ph_1_set == false
				c.ph_unit1 = GetSummonedUnit()
				c.ph_unit1.setFacing(c.ph_facing)
				c.ph_unit1.setPos(c.ph_pos + vec2(100*f.cos(),100*f.sin()))
				c.ph_unit1.setPropWindow(0)
				c.ph_1_set = true
				print("1st set")
			else
				c.ph_unit2 = GetSummonedUnit()
				c.ph_unit2.setFacing(c.ph_facing)
				c.ph_unit2.setPos(c.ph_pos + vec2(-100*f.cos(),-100*f.sin()))
				c.ph_unit2.setPropWindow(0)
				print("2nd set")
		
public function init_Crusader(boolean compiletime)
	CRUSADER_ID = HERO_ID_GEN.next()
	// generate valid id
	BACKOFF_SPELL_ID = ABIL_ID_GEN.next()
	SAFEGUARD_SPELL_ID = ABIL_ID_GEN.next()
	//DUMBACKOFF_SPELL_ID = ABIL_ID_GEN.next()
	PHALANX_SPELL_ID = ABIL_ID_GEN.next()
	
	if compiletime
		// Generate def if compieltime
		var spreset = new ChannelAbilityPreset(BACKOFF_SPELL_ID, 4)
		// Set Attributes
		spreset..removeChannelProperties(true)..setName("Back Off")..setButtonPositionNormalX(0)..setButtonPositionNormalY(2)
			..setIcon("BTNWarStomp")..setOption(Option.VISIBLE, true) //Or whatever...
			..setOrderStringActivate("warstomp")
		
		spreset = new ChannelAbilityPreset(SAFEGUARD_SPELL_ID, 4)
		// Set Attributes
		spreset..removeChannelProperties(true)..setName("Safeguard")..setButtonPositionNormalX(1)..setButtonPositionNormalY(2)
			..setIcon("BTNDefend")..setOption(Option.VISIBLE, true)
			..setCastRange(1,400)..setTargetType(Targettype.UTARGET)
			..setTargetsAllowed(1,"allied")
			
		AbilityDefinitionBladeMasterMirrorImage phalanx = new AbilityDefinitionBladeMasterMirrorImage(PHALANX_SPELL_ID)
		phalanx..setButtonPositionNormalX(0)..setButtonPositionNormalX(1)..setName("Phalanx")
			..setNumberofImages(1,2)..setDamageDealt(1,0)..setDamageTaken(1,1.2)
			..setManaCost(1,0)
			..setTooltipLearnExtended("Creates two identical Crusader fighters in a formation. Crusader will gain extra armor based on the number of zombies around, as long as he stays in the formation.")
		
		/*let adef = new AbilityDefinitionWarStompcreep(DUMBACKOFF_SPELL_ID)
		adef..setCooldown(1, 0)..setManaCost(1, 0) //Missing presets ehre 
		..setLevels(1)..setAreaofEffect(1, 300) // Done
		*/
		let preset = new HeroPreset(CRUSADER_ID, 'Hlgr', "Crusader")
		preset..addProperName("Matija")
			..setModelFile("units\\human\\TheCaptain\\TheCaptain.mdl")
			..addHeroAbility(BACKOFF_SPELL_ID)
			..addHeroAbility(SAFEGUARD_SPELL_ID)
			..addHeroAbility(PHALANX_SPELL_ID)
		// Build at the end
			..buildHero()
		
		
