package Crusader
import MapStuff
import Fx
import Creep
import Hero
import DummyCaster
import ChannelAbilityPreset
import AbilityObjEditing
import TempGroups


int CRUSADER_ID

int BACKOFF_SPELL_ID
int SAFEGUARD_SPELL_ID

int DUMBACKOFF_SPELL_ID

public class Crusader extends Hero
	real safeguard_timer // Counts back from 6 seconds
	real safeguard_damage // saves incoming damage for healback
	
	construct(vec3 pos, player owner )
		super(pos, owner, CRUSADER_ID)
		
	override function onCast(int spellId)
		print("You even called?")
		switch spellId
			case BACKOFF_SPELL_ID
				castBackOff() 
	
	override function onUnitCast(int spellId, unit target)
		print("You even called?")
		switch spellId
			case BACKOFF_SPELL_ID
				castBackOff() 
		
	override function onPointCast(int spellId, vec2 target)
	
	function castBackOff() // Q ability of Crusader. Instant cast.
		DummyCaster dc = new DummyCaster(DUMBACKOFF_SPELL_ID,"stomp",owner, false) //Create dummy for stun
		//dc.recycleDelay = .5
		//dc.castInPoint(pos.toVec2().polarOffset(actor.getFacingAngle(), 100))
		real abilityrange = 400 //could be dynamic later?
		GroupEnumUnitsInRange(ENUM_GROUP, pos.x,pos.y, abilityrange,null)
		for unit u in ENUM_GROUP
			if filterBackOff(u) //Check if selected by the spell
				Creep c = u.getEntity() castTo Creep
				real dist = (pos-c.pos).toVec2().length()
				if dist < 2*abilityrange/3
					vec3 v = (vec2(0,0).polarOffset(angleBetweenCoords(pos.x,pos.y,c.pos.x,c.pos.y), ((abilityrange*3/2)-dist * .1))).toVec3()
					v.z = ((abilityrange*3/2)-dist)
					//c.addVel(v) // Adding the knockback
				dc.castOnTarget(c.actor)
				//ENUM_GROUP.removeUnit(u) // Will this fuck the for cylce up?
				print("Kickaah")
		//dc.castOnGroup(ENUM_GROUP) //Using dummycaster's corresponding function.
		destroy dc
		
		
	function filterBackOff(unit u) returns boolean // We want to filter the units. Only effect the units in a sector in front of Crusader
		//unit u = GetEnumUnit()
		boolean notthis = u != actor //wont matter cause of iscreep
		boolean inangle = (angleBetweenCoords(pos.x,pos.y,u.getPos().x,u.getPos().y).degrees() - actor.getFacing()).abs() % 360 < 60
		boolean iscreep = u.getEntity() instanceof Creep
		return iscreep and inangle and notthis
		
			
		
		
public function init_Crusader(boolean compiletime)
	CRUSADER_ID = HERO_ID_GEN.next()
	// generate valid id
	BACKOFF_SPELL_ID = ABIL_ID_GEN.next()
	SAFEGUARD_SPELL_ID = ABIL_ID_GEN.next()
	DUMBACKOFF_SPELL_ID = ABIL_ID_GEN.next()
	
	if compiletime
		let apreset = new AbilityPreset(DUMBACKOFF_SPELL_ID, 'ACfb', 1)
		apreset..setCooldown(1, 0)..setManaCost(1, 0)
		..setMissileArt("")..setHeroAbility(false)..setMissileSpeed(6000) // Done
		
		// Generate def if compieltime
		var spreset = new ChannelAbilityPreset(BACKOFF_SPELL_ID, 4)
		// Set Attributes
		spreset..removeChannelProperties(true)..setName("Back Off")..setButtonPositionNormalX(0)..setButtonPositionNormalY(2)
			..setIcon("BTNWarStomp")..setOption(Option.VISIBLE, true) //Or whatever...
		
		spreset = new ChannelAbilityPreset(SAFEGUARD_SPELL_ID, 4)
		// Set Attributes
		spreset..removeChannelProperties(true)..setName("Safeguard")..setButtonPositionNormalX(1)..setButtonPositionNormalY(2)
			..setIcon("BTNDefend")..setOption(Option.VISIBLE, true)
			..setCastRange(400)..setTargetType(Targettype.UTARGET)..setTargetsAllowed(1,"allied")
		
		/*let adef = new AbilityDefinitionWarStompcreep(DUMBACKOFF_SPELL_ID)
		adef..setCooldown(1, 0)..setManaCost(1, 0) //Missing presets ehre 
		..setLevels(1)..setAreaofEffect(1, 300) // Done
		*/
		let preset = new HeroPreset(CRUSADER_ID, 'Oshd', "Kari")
		preset..addProperName("Crusader")
			..addHeroAbility(idInteger2IdString(BACKOFF_SPELL_ID))
		// Build at the end
			..buildHero()
		
		
