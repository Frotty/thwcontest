package Cage
import Hero
import Creep
import Entity
import Lightning
import ClosureTimers
import AbilityTooltipGenerator
import ClosureForGroups
import LinkedList

public int CAGE_SPELL_ID
public int CAGE_SECONDARY_SPELL_ID
int CAGE_NODE_ID

constant zoffset = vec3(0,0,60)
constant ACTIVATION_DIST = 60.

function getCageDuration(int lvl) returns real
	return 15. + lvl
	
function getCagePower(int lvl) returns real
	return 7.5 + 2.5 * lvl

public class CageNode extends Entity
	lightning lng
	boolean fixed = false
	
	construct( vec3 pos, player owner)
		super(pos, new Fx(pos, angle(0), "buildings\\nightelf\\ChimaeraRoost\\ChimaeraRoost.mdl"))
		fixed = false
		fx.setScale(0.3)
		fx.setPos(pos.x, pos.y, 0)
		fx.getDummy().setAnimation("Work")
		
	override function update()
	
	ondestroy
		lng.destr()

public class Cage
	LinkedList<CageNode> nodes
	Hero caster
	int lvl
	int i = 0
	
	construct(vec3 pos, Hero caster,int level)
		//Creating the lists
		nodes = new LinkedList<CageNode> ()
		//add a new node right away
		nodes.add(new CageNode(pos,caster.owner))
		lvl = level
		this.caster = caster
		//lngs = new LinkedList<lightning> ()
		//Add a new lighting, which is likely bugs while adding to list
		nodes.get(nodes.getSize()-1).lng = addLightning("FORK", true, pos+zoffset+vec3(100,100,0), caster.getPos3()+zoffset)
		nodes.get(nodes.getSize()-1).lng.setColor(colorA(255,255,255,64))
		doPeriodicallyTimed(ANIMATION_PERIOD,getCageDuration(lvl), (CallbackCounted cb)-> begin 
			update()
			if cb.isLast()
				destroy this
		end)
		
	function addNode(vec3 pos)
		var size = nodes.getSize()
		nodes.get(size-1).fixed = true
		if size < 4
			//Adding new nodes to the "fence"
			nodes.add(new CageNode(pos,caster.owner))
			size = nodes.getSize()
			nodes.get(size-1).lng = addLightning("FORK", true, pos+zoffset+vec3(100,100,0), caster.getPos3()+zoffset)
			nodes.get(size-1).lng.setColor(colorA(255,255,255,64))
			//lightnings not act as intended, for example the lighting created above is not visible in game
			print("Node added: " + nodes.getSize().toString() + " and " + nodes.get(size-1).fx.getDummy().getHandleId().toString())
			if size >= 2
				//If there are more then 2 lightnings, the latter shall be "fixed" to the two nodes before. 
				//Since position is right because update, there is no need to move, only color
				nodes.get(size-2).lng.setColor(colorA(255,255,255,192))
				if size == 4
					nodes.get(size-1).lng.move(true, nodes.get(size-1).getPos3()+zoffset, nodes.get(0).getPos3()+zoffset)
				else
					nodes.get(size-1).lng.move(true, nodes.get(size-1).getPos3()+zoffset, nodes.get(size-2).getPos3()+zoffset)
		else if size == 4
			nodes.get(size-1).lng.setColor(colorA(255,255,255,192))
	
	function update()
		//This move is definitely doesn't work :(
		let size = nodes.getSize()
		if size < 4
			nodes.get(size-1).lng.move(true, nodes.get(size-1).getPos3()+zoffset, caster.getPos3()+zoffset)
		for i = 0 to size-1 //Looping until the last ACTIVE nod
			var n1 = nodes.get(i)
			if n1.fixed
				print("active - " + i.toString())
				CageNode n2
				if i == 3
					n2 = nodes.get(0)
				else
					n2 = nodes.get(i+1)
				var middle = vec2((n1.getPos3().x + n2.getPos3().x)/2.,(n1.getPos3().y + n2.getPos3().y)/2.)
				var radius = n1.getPos3().distToVec2d(n2.getPos2()) / 2.
				forUnitsInRange(middle,radius,(unit u)->begin
					string s = "In Cage Range"
					if u.isAliveTrick() and u.getEntity() instanceof Creep
						var c = u.getEntity() castTo Creep
						s += "and Creep"
						if /*not c.flying and*/ c.getPos3().toVec2().distToSegmentSquared(n1.getPos3().toVec2(), n2.getPos3().toVec2() ) < ACTIVATION_DIST.squared()
							s+= "and adding velocity"
							c.applyVel(vec2(0,0).polarOffset(u.getFacingAngle() + angle(PI),getCagePower(lvl)).toVec3())
					print(s)
				end)
				
		//if e.alive and not e.flying and e.pos.toVec2().distToSegmentSquared(pos.toVec2(), l.linkedNode.pos.toVec2() ) < ACTIVATION_DIST.squared()
	
	ondestroy
		for n in nodes
			destroy n
		destroy nodes
			
			
public function init_Cage(boolean compileTime)
	
	CAGE_SPELL_ID = ABIL_ID_GEN.next()
	CAGE_SECONDARY_SPELL_ID = ABIL_ID_GEN.next()
	
	if compileTime
		var cage = new ChannelAbilityPreset(CAGE_SPELL_ID, 1)
		cage..removeChannelProperties(true)..setName("Cage")
			..setButtonPositionNormalX(3)..setButtonPositionNormalY(2)
			..setButtonPositionResearchX(3)..setButtonPositionResearchY(0)
			..setIcon("BTNHolyBolt")..setOption(Option.VISIBLE, true)
			..setOrderStringActivate("holybolt")
		
		