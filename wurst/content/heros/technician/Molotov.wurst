package Molotov
import Projectile
import PhysicsEntity
import Terrain
import MapStuff
import ChannelAbilityPreset
import ClosureForGroups
import XBurn
import Hero
import Napalm
import Explosive

public int MOLOTOV_SPELL_ID

public class Molotov extends Projectile
	use PhysicsModule
	
	int bounces
	Hero caster = null
	construct(vec3 pos, vec2 target, player owner, int lvl)
		super(pos, owner, pos.angleTo2d(target), "Models\\Molotov.mdx")
		flying = true
		bounces = min(lvl, 3)
		setTarget(target, 300)
		
	construct(vec3 pos, vec2 target, Hero caster, int lvl)
		super(pos, caster.owner, pos.angleTo2d(target), "Models\\Molotov.mdx")
		flying = true
		bounces = min(lvl, 3)
		setTarget(target, 300)
		this.caster = caster
		
	override function update()
		if bounces < 0
			destroy this
		else
			physicsUpdate(this)
			super.update()
		

	override function onGroundHit()
		let nrml = getTerrainNormal(pos.x, pos.y, 4).norm()
		if vel.dot(nrml) > 0
			return
			
		var v = vel.project(nrml)
		v *= -1.8
		vel += v
		fx.flash("Models\\FlameBomb.mdx")
		forUnitsInRange(pos.toVec2(), 128, (unit u) -> begin
			if u.getOwner().isEnemyOf(this.owner)
				u.addXBurn(caster)
		end)
		for n in activeNapalms
			if pos.distToVec2dSquared(n.pos) < IGNITE_DISTANCE_SQ
				n.ignite()
		for e in explosiveEntities
			if pos.distToVec2dSquared(e.pos.toVec2()) < IGNITE_DISTANCE_SQ
				e.explode()
		bounces--


public function init_Molotov(boolean c)
	MOLOTOV_SPELL_ID = ABIL_ID_GEN.next()
	
	if c
		let molotovPreset = new ChannelAbilityPreset(MOLOTOV_SPELL_ID, 4)
		molotovPreset..setName("Molotov")..removeChannelProperties(true)..setOption(Option.VISIBLE, true)
		..setIcon("BTNSunFragment")..setTargetType(Targettype.PTARGET)
		..setCastRange(1, 400)
		