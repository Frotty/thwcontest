package Xplosives
import Explosive
import Hero
import ClosureForGroups
import XBurn
import Creep
import TooltipGenerator

public int EXPLOSIVES_SPELL_ID
int MAX_EXPLOSIVES_ID

constant XPLOSIVES_NAME = "Xplosives"
constant XPLOSIVES_HOTKEY = "Q"
constant XPLOSIVES_COOLDOWN = 35
constant XPLOSIVES_MAXLVL = 4

constant MAX_XPLOSIVES_NAME = "Maximum Reached"

function getMaxXplo(int lvl) returns int
	return 2 + lvl
	
function getXplosionRadius(int lvl) returns real
	return 200. + 64 * lvl
	
function getXplosionPower(int lvl) returns real
	return 50. + 10 * (lvl*lvl)
	
function getXplosionCooldown(int lvl) returns int
	return 35 - 2*lvl

public function registerHeroXplo(Hero h)
	let t = CreateTrigger()
	t..registerPlayerUnitEvent(h.owner, EVENT_PLAYER_HERO_SKILL, null)
	..addAction(() -> begin
		if GetLearnedSkill() == EXPLOSIVES_SPELL_ID and GetLearningUnit().hasAbility(MAX_EXPLOSIVES_ID)
			GetLearningUnit()..removeAbility(MAX_EXPLOSIVES_ID)..addAbility(EXPLOSIVES_SPELL_ID)
	end)
	
public function createXplosive(vec2 target, Hero caster, int lvl)
	new Xplosive(target, caster, lvl)
	if Xplosive.count >= getMaxXplo(lvl)
		caster.actor..removeAbility(EXPLOSIVES_SPELL_ID)..addAbility(MAX_EXPLOSIVES_ID)..setAbilityLevel(MAX_EXPLOSIVES_ID, lvl)

public class Xplosive extends Explosive
	static int count = 0
	Hero caster

	construct(vec2 target, Hero caster, int lvl)
		super(target.withZ(0), getXplosionRadius(lvl), getXplosionPower(lvl), caster.owner, angle(GetRandomReal(0, PI2)))
		setModel("Units\\Other\\TNTBarrel\\TNTBarrel.mdx")
		this.caster = caster
		count++
		
	override function explode()
		addEffect("Models\\SapperExplo.mdx", pos).destr()
		forUnitsInRange(pos.toVec2(), radius, (unit u) -> begin
			if u.getEntity() instanceof Creep
				let up = u.getPos()
				let distSQ = pos.distToVec2dSquared(up)
				let angl = up.angleTo(pos.toVec2())
				let p = 1 - distSQ / (radius*radius)
				caster.actor.damageTarget(u, power*p) 
				if p > 0.6
					let pp = p-0.6 * 4
					u.getEntity().setVel(vec3(angl.cos()*power/5*pp,angl.sin()*power/5*pp, power/4))
				u.addXBurn(caster, 1)
		end)
		destroy this
		
	
	ondestroy
		count--
		if caster.actor.hasAbility(MAX_EXPLOSIVES_ID)
			caster.actor..removeAbility(MAX_EXPLOSIVES_ID)..addAbility(EXPLOSIVES_SPELL_ID)
			

	
public function init_Xplosives(boolean c)
	EXPLOSIVES_SPELL_ID = ABIL_ID_GEN.next()
	MAX_EXPLOSIVES_ID = ABIL_ID_GEN.next()
	if c
		
		let xplosivePreset = new ChannelAbilityPreset(EXPLOSIVES_SPELL_ID, 4)
		xplosivePreset..removeChannelProperties(true)..setName("Xplosives")
		..setButtonPosNormal(0,2)..setIcon("BTNExplosiveBarrel")
		..setOption(Option.VISIBLE, true)..setTargetType(Targettype.PTARGET)..setOption(Option.TARGETIMAGE, true)
		..setAreaOfEffect(128)..setHotkey(XPLOSIVES_HOTKEY)
		..setCastRange(1, 180)
		new TooltipGenerator(XPLOSIVES_NAME, XPLOSIVES_HOTKEY, Targettype.PTARGET, XPLOSIVES_MAXLVL, "Bombz")
		..addProperty("Cast Range:", (180.).toString())
		..addProperty("Area of Effect:", (int lvl) -> getXplosionRadius(lvl).toString())
		..addProperty("Cooldown:", (int lvl) -> getXplosionCooldown(lvl).toString())
		..addProperty("Xplosion Power:", (int lvl) -> getXplosionPower(lvl).toString())
		..applyToDef(xplosivePreset)
	
		
		let xdum = new AbilityDefinitionBashcreep(MAX_EXPLOSIVES_ID)
		xdum..setChancetoBash(1, 0)..setChancetoMiss(1, 0)..setButtonPosNormal(0, 2)
		..setIcon("PASExplosiveBarrel")..setName("Maximum Amount")
		new TooltipGenerator(MAX_XPLOSIVES_NAME, "", Targettype.PASSIVE, 4, "You reached the maximum Explosives for this level.")
		..addProperty("Amount:", (int lvl) -> getMaxXplo(lvl).toString())
		..applyToDef(xdum)
			
	
