package PhysicsEntity
import Entity
import Terrain
import GameConstants
import MapBounds
//Module for Physical Simulation
public module PhysicsModule
	/** Affected by gravity */
	boolean affectedByGravity = true
	boolean flying = true
	// Physical factors
	
	// The higher the more slide. Should be < 1.
	real friction = 0.9
	// Defines the bounciness
	real restitution = 0.5
	real terrainZ = 0
		
		
	function physicsUpdate(Entity e, boolean checkForSleep)
		let pos = e.getPos()
		let vel = e.getVel()
		if not pos.toVec2().inBounds()
			e.scaleVel(-1.5)
		if checkForSleep
			if vel.lengthSquared() < 1 and not flying
				e.needPhysicsUpdate = false
				return
		terrainZ = getTerrainZ(pos.x, pos.y)
		if pos.z <= terrainZ + 2
			onGround(e)
		else
			if vel.lengthSquared() < 1 and not flying
				onGround(e)
			else
				inAir(e)
			
	function onGroundHit()
		
	function onEscapeGround()
		
	function onGround()
		
	function inAir()
		
	// When the Entity is on or near the ground	
	function onGround(Entity e)
		if flying
			flying = false
			onGroundHit()
		e.setZ(terrainZ)
		e.scaleVel(friction)
		onGround()
		
	function inAir(Entity e)
		if not flying
			flying = true
			onEscapeGround()
		if affectedByGravity
			e.addVel(gravity)
		inAir()
