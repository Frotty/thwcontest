package Hero
import public MapStuff
import public Entity
import public HeroPreset
import public ObjectIds
import public ObjectIdGenerator
import public ChannelAbilityPreset

public abstract class Hero extends Entity
	
	construct(vec3 pos, player owner, int id)
		super(pos, createUnit(owner, id, pos, pos.angleTo2d(STATUE_POS)))
		castTrigger.registerUnitEvent(actor, EVENT_UNIT_SPELL_EFFECT)
		active = true
		sleeping = false
			
	abstract function onCast(int spellId, int lvl)
		
	abstract function onUnitCast(int spellId, unit target, int lvl)
		
	abstract function onPointCast(int spellId, vec2 target, int lvl)
		
	
constant castTrigger = CreateTrigger()

init
	castTrigger.addAction(() -> begin
		let hero = GetTriggerUnit().getEntity() castTo Hero
		let id = GetSpellAbilityId()
		let targetUnit = GetSpellTargetUnit()
		let targetX = GetSpellTargetX()
		let targetY = GetSpellTargetY()
		let lvl = hero.actor.getAbilityLevel(id)
		print("duh " + targetUnit.getName())
		
		if targetUnit != null
			print("onCast Unit")
			hero.onUnitCast(id, targetUnit, lvl)
		else if targetX != 0 
			print("onCast Point")
			hero.onPointCast(id, vec2(targetX, targetY), lvl)
		else
			print("onCast")
			hero.onCast(id, lvl)
		
	end)