package Hero
import public Entity
import public HeroPreset
import public ObjectIds
import PhysicsEntity

public abstract class Hero extends UnitEntity
	use PhysicsModule
	
	construct(vec3 pos, player owner, int id)
		super(pos, createUnit(owner, id, pos, angle(0)))
		castTrigger.registerUnitEvent(actor, EVENT_UNIT_SPELL_EFFECT)
		
	override function update()
		super.update()
		physicsUpdate(this)
		
	override function onGround()
		pos += vel
		actor.setXY(pos)
		
		
	override function inAir()
		pos += vel
		actor.setXY(pos)
		actor.setFlyHeight(pos.z-terrainZ,0)
		
	override function onEscapeGround()
		actor.setPropWindow(0)
		
	override function onGroundHit()
		actor.setPropWindow(180)
		pos.z = terrainZ 
		vel.z = 0
		
	abstract function onCast(int spellId)
		
	abstract function onUnitCast(int spellId, unit target)
		
	abstract function onPointCast(int spellId, vec2 target)
		
	
constant castTrigger = CreateTrigger()

init
	castTrigger.addAction(() -> begin
		let hero = GetTriggerUnit().getEntity() castTo Hero
		let id = GetSpellAbilityId()
		let targetUnit = GetSpellTargetUnit()
		let targetX = GetSpellTargetX()
		let targetY = GetSpellTargetY()
		print("duh " + targetUnit.getName())
		
		if targetUnit != null and targetUnit != hero.actor
			print("onCast Unit")
			hero.onUnitCast(id, targetUnit)
		else if targetX != 0 
			print("onCast Point")
			hero.onPointCast(id, vec2(targetX, targetY))
		else
			print("onCast")
			hero.onCast(id)
		
	end)