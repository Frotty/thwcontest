package Hero
import public MapStuff
import public Entity
import public HeroPreset
import public ObjectIds
import public ObjectIdGenerator
import public ChannelAbilityPreset
import public Items
import ClosureTimers

public abstract class Hero extends Entity
	WeaponItem weapon
	
	construct(vec3 pos, player owner, int id)
		super(pos, createUnit(owner, id, pos, pos.angleTo2d(STATUE_POS)))
		castTrigger.registerUnitEvent(actor, EVENT_UNIT_SPELL_EFFECT)
		itemTrigger.registerUnitEvent(actor, EVENT_UNIT_USE_ITEM)
		active = true
		sleeping = false
//		doAfter(1., ()-> weapon.refreshWeapon(actor) )
			
	abstract function onCast(int spellId, int lvl)
		
	abstract function onUnitCast(int spellId, unit target, int lvl)
		
	abstract function onPointCast(int spellId, vec2 target, int lvl)
		
	ondestroy
		actor.remove()
	
constant castTrigger = CreateTrigger()
constant itemTrigger = CreateTrigger()

init
	castTrigger.addAction(() -> begin
		let hero = GetTriggerUnit().getEntity() castTo Hero
		let id = GetSpellAbilityId()
		let targetUnit = GetSpellTargetUnit()
		let targetX = GetSpellTargetX()
		let targetY = GetSpellTargetY()
		let lvl = hero.actor.getAbilityLevel(id)
		
		if targetUnit != null
			hero.onUnitCast(id, targetUnit, lvl)
		else if targetX != 0 
			hero.onPointCast(id, vec2(targetX, targetY), lvl)
		else
			hero.onCast(id, lvl)
		
	end)
	itemTrigger.addAction(() -> begin
		let hero = GetTriggerUnit().getEntity() castTo Hero
		let ite = GetManipulatedItem()
		let id = GetItemTypeId(ite)
		
		if id == DMG_POWERUP_ID
			hero.weapon.upgradeDamage(hero.actor)
	end) 