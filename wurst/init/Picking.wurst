package Picking
import UnitObjEditing
import MapStuff
import Crusader
import Technician
import Mage
import Specialist
import Hero
import Fx
import Terrain
import WaveManager
import Queue
import ClosureTimers
import ItemObjEditing
import Players
public int PICK_SPELL_ID

LinkedList<Pickable> pickables


function getHeroDescription(int id) returns string
	switch id
		case 0 //Crusader
			return "Crusader is the main supportive hero of the game, who is also able to withstand tons of damage. He can be vital for surviving."
		case 1 //Technician
			return "Technician is the most tactical hero. You can build your own battlefield, with huge explosives and fire."
		case 2 //Mage
			return "\"Mage is truly epic.\" She stands in the middle of the battlefield, exploding enemies. Be careful though, if creeps manage to get near her, she dont have long left."
		case 3 //Specialist
			return "Specialist is great at manipulating enemies, and reforming their hordes. Use him on side of a mage for maximal efficenty!"
		default
			return "The Ghost Hero is the most powerful of all, truly, truly powerful. You may pick him quick, and pick him now!"

	
class Pickable
	Hero h
	Fx platform
	int id
	trigger castTrigger

	construct(int ord, Hero hero, Fx fx)
		h = hero
		platform = fx
		id = ord
		
		//This trigger is only created, because i wanted to test PICK_SPELL_ID in this package instead of doing it in Hero.wurst
		castTrigger = CreateTrigger()
		castTrigger.registerUnitEvent(h.actor, EVENT_UNIT_SELL)
		castTrigger.addAction(function onSell)
		
		//Setting some properties of the hero actor:
		h.actor.setPropWindow(0.)
		h.sleeping = true
		h.actor.addAbility(PICK_SPELL_ID)
		ModifyHeroSkillPoints(h.actor, bj_MODIFYMETHOD_SET, 0)
		h.actor.setPathing(false)
		hero.actor.setOwner(DUMMY_PLAYER, true)
		hero.owner = DUMMY_PLAYER
		AddUnitToStock(hero.actor, PICKDUMMY_ID, 1, 1)
		
		print("pickable done")
		
		
		
	//Called when the pick is casted. Picks the hero.
	function pick(player p)
		h.actor.setOwner(p,true)
		h.owner = p
		h.sleeping = false
		h.actor.setPropWindow(GetUnitDefaultPropWindow(h.actor))
		h.actor.removeAbility(PICK_SPELL_ID)
		ModifyHeroSkillPoints(h.actor, bj_MODIFYMETHOD_SET, 1)
		h.actor.setPathing(true)
		ResetToGameCameraForPlayer(p, 1.3)
		pDatas[p.getId()].pickdummy.remove()
		if GetLocalPlayer() == h.owner
			ResetTerrainFog()
		destroy this
		
	static function onSell()
		if GetSpellAbilityId() == PICK_SPELL_ID
			var u = GetSoldUnit()
			var p = u.getOwner()
			var h = GetTriggerUnit().getEntity() castTo Hero
			
			
			print("p = " + p.getName())
			for pi in pickables
				if h == pi.h
					pi.pick(p)
			u.remove()

	ondestroy
		pickables.remove(this)
		destroy platform
		castTrigger.destr()
		checkIfStart()
		h.actor..removeAbility('Ane2')..removeAbility('Asud')
	
public function testPicking()
	for i = 1 to 3
		doAfter(i* 5., ()->begin
			SelectUnitForPlayerSingle( pickables.get(i).h.actor ,Player(1))
			print("Player 1 selected " + pickables.get(i).h.actor.getName())
		end)
	for i = 1 to 3
		doAfter(i* 2.7 + 5., ()->begin
			SelectUnitForPlayerSingle( pickables.get(i).h.actor ,Player(2))
			print("Player 2 selected " + pickables.get(i).h.actor.getName())
		end)

function createHero(int id, vec3 pos) returns Hero
	Hero h = null
	if id == 0
		h = new Crusader(pos,Player(8) )
	else if id == 1
		h = new Technician(pos,Player(8) )
	else if id == 2
		h = new Mage(pos,Player(8) )
	else if id == 3
		h = new Specialist(pos,Player(8) )
	return h

public function createPickabes()
	pickables = new LinkedList<Pickable> ()
	for i = 0 to heroCount-1
		var a = angle(i*2*PI/heroCount)
		var offset = STATUE_POS.polarOffset(a,200)
		var z = getTerrainZ(offset.x,offset.y)
		let fx = new Fx(offset.withZ(2000),a, "buildings\\other\\MagicVault\\MagicVault.mdl")
		fx.setZ(2000-z)
		pickables.add(new Pickable(i,createHero(i,offset.withZ(2200)),fx))
			
	for p in allPlayers
		p.pickdummy = createUnit(p.p, PICKDUMMY_ID, STATUE_POS, angle(0))	
		SelectUnit(p.pickdummy, true)
			//Todo playernumber
	camerasetup pick_cam = gg_cam_Pick_Camera
	CameraSetupSetDestPosition(pick_cam, STATUE_POS.x,STATUE_POS.y,0.)
	CameraSetupApplyForceDuration(pick_cam, true,0.)
	
boolean started = false

function checkIfStart()
	if not started and pickables.getSize() <= heroCount - playerNumber +1 //todo playerNumber +1 is because when its checked, last pickable isn't removed
		WaveManager.startNextWave()
		started = true
		for pi in pickables
			destroy pi.h
			//**WARNING! THIS IS UGLY**//
			doAfter(ANIMATION_PERIOD, ()->destroy pi)
	
int PICKDUMMY_ID

public function init_Picking(boolean ct)
	PICKDUMMY_ID = UNIT_ID_GEN.next()
	if ct
		let def = new UnitDefinition(PICKDUMMY_ID, 'hfoo')
		..setNormalAbilities("Agho")..setSightRadiusDay(0)..setSightRadiusNight(0)..setModelFile("")
		..setName("Pick Hero")..setGoldCost(0)..setFoodCost(0)..setTooltipBasic("Pick Hero")..setTooltipExtended("")
		..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNPickUpItem.blp")
		